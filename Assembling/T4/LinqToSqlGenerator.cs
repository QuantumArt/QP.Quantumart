// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;
using EnvDTE;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Microsoft.VisualStudio.TextTemplating;

namespace Quantumart.QP8.Assembling.T4
{
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class LinqToSqlGenerator : LinqToSqlGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 // L2ST4 - LINQ to SQL templates for T4 v0.86 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)

            
            #line default
            #line hidden
            
            #line 7 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 // Set options here
var options = new {
    DbmlFileName = DbmlPath ?? Host.TemplateFile.Replace(".tt",".dbml"), // Which DBML file to operate on (same filename as template)
    SerializeDataContractSP1 = false, // Emit SP1 DataContract serializer attributes
    FilePerEntity = false, // Put each class into a separate file
    StoredProcedureConcurrency = false // Table updates via an SP require @@rowcount to be returned to enable concurrency
};
var code = new CSharpCodeLanguage();
var data = new Data(options.DbmlFileName);
var manager = Manager.Create(Host, GenerationEnvironment);
data.ContextNamespace = Namespace ?? (new[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedContextNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
data.EntityNamespace = Namespace ?? (new[] { manager.GetCustomToolNamespace(data.DbmlFileName), data.SpecifiedEntityNamespace, manager.DefaultProjectNamespace }).FirstOrDefault(s => !String.IsNullOrEmpty(s));
manager.StartHeader();

            
            #line default
            #line hidden
            Write(@"#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
");
            
            #line 33 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (data.Functions.Count > 0) {
            
            #line default
            #line hidden
            Write("using System.Reflection;\r\n");
            
            #line 35 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
var dataContractAttributes = (options.SerializeDataContractSP1) ? "IsReference=true" : "";
if (data.Serialization) {
            
            #line default
            #line hidden
            Write("using System.Runtime.Serialization;\r\n");
            
            #line 39 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write("\r\n");
            
            #line 41 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 manager.EndBlock();
if(!String.IsNullOrEmpty(data.ContextNamespace)){
            
            #line default
            #line hidden
            Write("namespace ");
            
            #line 43 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextNamespace));
            
            #line default
            #line hidden
            Write("\r\n{\r\n");
            
            #line 45 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}

if (GenerateDbAttributes && !String.IsNullOrEmpty(data.DatabaseName)) {
            
            #line default
            #line hidden
            Write("    [DatabaseAttribute(Name=@\"");
            
            #line 48 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.DatabaseName));
            
            #line default
            #line hidden
            Write("\")]\r\n");
            
            #line 49 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write("    ");
            
            #line 49 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(data.TypeAttributes)));
            
            #line default
            #line hidden
            Write("partial class ");
            
            #line 49 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write(" : ");
            
            #line 49 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.BaseClassName));
            
            #line default
            #line hidden
            Write("\r\n    {\r\n        private static MappingSource mappingSource = new AttributeMappin" +
                    "gSource();\r\n\r\n        #region Extensibility Method Definitions\r\n        partial " +
                    "void OnCreated();\r\n");
            
            #line 55 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    var tableOperations = new List<TableOperation>();
    foreach(var table in data.Tables)
    {
        tableOperations.AddRange(table.Operations);
    }
            foreach(var table in data.Tables)
        foreach(OperationType operationType in Enum.GetValues(typeof(OperationType)))
        {
            if (!tableOperations.Any(o => (o.Table == table) && (o.Type == operationType))) {
            
#line default
#line hidden
                Write("        partial void ");
            
#line 61 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(operationType));
            
#line default
#line hidden
            
#line 61 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(table.BaseClass.Name));
            
#line default
#line hidden
                Write("(");
            
#line 61 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(table.BaseClass.QualifiedName));
            
#line default
#line hidden
                Write(" instance);\r\n");
            
#line 62 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
        }

#line default
            #line hidden
            Write("        #endregion\r\n\r\n        #region Construction\r\n");
            
            #line 66 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (data.ConnectSettingsObject != null) {
            
            #line default
            #line hidden
            Write("        public ");
            
            #line 67 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write("() :\r\n            base(global::");
            
            #line 68 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ConnectSettingsObject));
            
            #line default
            #line hidden
            Write("[\"");
            
            #line 68 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ConnectSettingsProperty));
            
            #line default
            #line hidden
            Write("\"].ConnectionString, mappingSource)\r\n        {\r\n            OnCreated();\r\n       " +
                    " }\r\n");
            
            #line 72 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write("        public ");
            
            #line 73 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write("(string connection) :\r\n            base(connection, mappingSource)\r\n        {\r\n  " +
                    "          OnCreated();\r\n        }\r\n\r\n        public ");
            
            #line 79 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write("(System.Data.IDbConnection connection) :\r\n            base(connection, mappingSou" +
                    "rce)\r\n        {\r\n            OnCreated();\r\n        }\r\n\r\n        public ");
            
            #line 85 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write("(string connection, MappingSource mappingSource) :\r\n            base(connection, " +
                    "mappingSource)\r\n        {\r\n            OnCreated();\r\n        }\r\n\r\n        public" +
                    " ");
            
            #line 91 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.ContextName));
            
            #line default
            #line hidden
            Write("(System.Data.IDbConnection connection, MappingSource mappingSource) :\r\n          " +
                    "  base(connection, mappingSource)\r\n        {\r\n            OnCreated();\r\n        " +
                    "}\r\n        #endregion\r\n");
            
            #line 97 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if(data.Tables.Count > 0) {
            
            #line default
            #line hidden
            Write("\r\n        #region Tables\r\n");
            
            #line 100 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    foreach(var table in data.Tables) {

            
            #line default
            #line hidden
            Write("        ");
            
            #line 101 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.GetAccess(table.TypeAttributes)));
            
            #line default
            #line hidden
            Write("Table<");
            
            #line 101 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(table.BaseClass.QualifiedName));
            
            #line default
            #line hidden
            Write("> ");
            
            #line 101 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(table.Member));
            
            #line default
            #line hidden
            Write("\r\n        {\r\n            get { return GetTable<");
            
            #line 103 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(table.BaseClass.QualifiedName));
            
            #line default
            #line hidden
            Write(">(); }\r\n        }\r\n\r\n");
            
            #line 106 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    }

            
            #line default
            #line hidden
            Write("        #endregion\r\n");
            
            #line 108 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
if (data.Functions.Count > 0) {
            
            #line default
            #line hidden
            Write("\r\n        #region Functions\r\n");
            
            #line 112 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    foreach(var function in data.Functions) {
        if (GenerateDbAttributes) {

            
            #line default
            #line hidden
            Write("        [Function(Name=@\"");
            
            #line 115 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 115 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

            if (function.IsComposable) {
            
            #line default
            #line hidden
            Write(", IsComposable=true");
            
            #line 116 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
        
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 118 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            if (function.Return != null && function.Return.DbType != null) {

            
            #line default
            #line hidden
            Write("        [return: Parameter(DbType=@\"");
            
            #line 119 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(function.Return.DbType));
            
            #line default
            #line hidden
            Write("\")]\r\n");
            
            #line 120 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
          }
            if (function.HasMultipleResults) {
                foreach(var class1 in function.Classes) {
            
            #line default
            #line hidden
            Write("        [ResultType(typeof(");
            
            #line 123 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.QualifiedName));
            
            #line default
            #line hidden
            Write("))]\r\n");
            
            #line 124 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
            }
        }
            
            #line default
            #line hidden
            Write("        ");
            
            #line 127 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(function.MemberAttributes)));
            
            #line default
            #line hidden
            
            #line 127 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(function.ReturnType)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 127 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(function.Method));
            
            #line default
            #line hidden
            Write("(");
            
            #line 127 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

        foreach(var parameter in function.Parameters) {
            if (GenerateDbAttributes) {
            
            #line default
            #line hidden
            Write("                [Parameter(");
            
            #line 130 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (parameter.DbName != parameter.Name) {
            
            #line default
            #line hidden
            Write("Name=@\"");
            
            #line 130 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(parameter.DbName));
            
            #line default
            #line hidden
            Write("\", ");
            
            #line 130 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write("DbType=@\"");
            
            #line 130 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(parameter.DbType));
            
            #line default
            #line hidden
            Write("\")]");
            
            #line 130 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 }
                
            
            #line default
            #line hidden
            Write(" ");
            
            #line 131 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(parameter.Direction)));
            
            #line default
            #line hidden
            
            #line 131 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(parameter.Type)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 131 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            
            #line 131 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

            if (parameter != function.Parameters.Last()) {
            
            #line default
            #line hidden
            Write(",");
            
            #line 132 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 }
        }
        
            
            #line default
            #line hidden
            Write(") {\r\n");
            
            #line 135 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        foreach(var outParameter in function.Parameters.Where(p => p.Direction == ParameterDirection.Out)) {
            
            #line default
            #line hidden
            Write("            ");
            
            #line 136 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(outParameter.Name));
            
            #line default
            #line hidden
            Write(" = default(");
            
            #line 136 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(outParameter.Type)));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 137 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        if (function.IsComposableQuery) { 
            
            #line default
            #line hidden
            Write("            return CreateMethodCallQuery<");
            
            #line 139 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(function.ResultType)));
            
            #line default
            #line hidden
            Write(">(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))");
            
            #line 139 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(String.Join("", function.Parameters.Select(p => ", " + p.Name).ToArray())));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 140 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        } else { 
            
            #line default
            #line hidden
            Write("            IExecuteResult result = ExecuteMethodCall(this, (MethodInfo) MethodIn" +
                    "fo.GetCurrentMethod()");
            
            #line 141 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(String.Join("", function.Parameters.Select(p => ", " + p.Name).ToArray())));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 142 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            var paramIdx = 0;
            foreach(var parameter in function.Parameters) {
                if (parameter.Direction != ParameterDirection.In) {
            
            #line default
            #line hidden
            Write("            ");
            
            #line 145 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            Write(" = (");
            
            #line 145 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(parameter.Type)));
            
            #line default
            #line hidden
            Write(") result.GetParameterValue(");
            
            #line 145 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(paramIdx));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 146 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
                paramIdx++;
            }

            
            #line default
            #line hidden
            Write("            return (");
            
            #line 149 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(function.ReturnType)));
            
            #line default
            #line hidden
            Write(") result.ReturnValue;\r\n");
            
            #line 150 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
            
            #line default
            #line hidden
            Write("        }\r\n\r\n");
            
            #line 153 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    }
            
            #line default
            #line hidden
            Write("        #endregion\r\n\r\n");
            
            #line 156 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    if (tableOperations.Count > 0) { 
            
            #line default
            #line hidden
            Write("        #region Table Operations\r\n");
            
            #line 158 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        foreach(var operation in tableOperations) { 
            
            #line default
            #line hidden
            Write("        private void ");
            
            #line 159 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(operation.Type));
            
            #line default
            #line hidden
            
            #line 159 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(operation.Table.BaseClass.Name));
            
            #line default
            #line hidden
            Write("(");
            
            #line 159 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(operation.Table.BaseClass.QualifiedName));
            
            #line default
            #line hidden
            Write(" obj) {\r\n");
            
            #line 160 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            if (operation.Arguments.Any(a => a.Version == ArgumentVersion.Original)) {

            
            #line default
            #line hidden
            Write("           var original = ");
            
            #line 161 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(operation.Table.Member));
            
            #line default
            #line hidden
            Write(".GetOriginalEntityState(obj);\r\n");
            
            #line 162 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            var paramIdx = 1;
            foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {

            
            #line default
            #line hidden
            Write("            ");
            
            #line 165 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(argument.Parameter.Type)));
            
            #line default
            #line hidden
            Write(" p");
            
            #line 165 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(paramIdx++));
            
            #line default
            #line hidden
            Write(" = obj.");
            
            #line 165 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(argument.Member));
            
            #line default
            #line hidden
            Write(";\r\n");
            
            #line 166 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            
            #line default
            #line hidden
            Write("            ");
            
            #line 167 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 if (options.StoredProcedureConcurrency) {
            
            #line default
            #line hidden
            Write("var rowCount = ");
            
            #line 167 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            
            #line 167 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(operation.Function.Method));
            
            #line default
            #line hidden
            Write("(");
            
            #line 167 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

            paramIdx = 1;
            foreach(var argument in operation.Arguments) {
                switch(argument.Parameter.Direction) {
                    case ParameterDirection.InOut: 
            
            #line default
            #line hidden
            Write("ref p");
            
            #line 171 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(paramIdx++));
            
            #line default
            #line hidden
            
            #line 171 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 break;
                    case ParameterDirection.Out: 
            
            #line default
            #line hidden
            Write("out p");
            
            #line 172 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(paramIdx++));
            
            #line default
            #line hidden
            
            #line 172 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 break;
                    default: 
            
            #line default
            #line hidden
            
            #line 173 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture((argument.Version == ArgumentVersion.New) ? "obj" : "original"));
            
            #line default
            #line hidden
            Write(".");
            
            #line 173 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(argument.Member));
            
            #line default
            #line hidden
            
            #line 173 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 break;
                }
            if (argument != operation.Arguments.Last()) {
            
            #line default
            #line hidden
            Write(", ");
            
            #line 175 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            }
            
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 178 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            if (options.StoredProcedureConcurrency) {
            
            #line default
            #line hidden
            Write("            if (rowCount != 1) {\r\n                throw new ChangeConflictExcepti" +
                    "on();\r\n            }\r\n");
            
            #line 182 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            paramIdx = 1;
            foreach(var argument in operation.Arguments.Where(a => a.Parameter.Direction != ParameterDirection.In)) {

            
            #line default
            #line hidden
            Write("            obj.");
            
            #line 185 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(argument.Member));
            
            #line default
            #line hidden
            Write(" = p");
            
            #line 185 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(paramIdx++));
            
            #line default
            #line hidden
            Write(".GetValueOrDefault();\r\n");
            
            #line 186 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            
            #line default
            #line hidden
            Write("        }\r\n\r\n");
            
            #line 189 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

        }

            
            #line default
            #line hidden
            Write("        #endregion\r\n");
            
            #line 193 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
    }
}
            
            #line default
            #line hidden
            Write("    }\r\n");
            
            #line 196 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (!String.IsNullOrEmpty(data.ContextNamespace)) {

            
            #line default
            #line hidden
            Write("}\r\n");
            
            #line 198 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
foreach(var table in data.Tables) {
    foreach(var class1 in table.Classes) {
        manager.StartNewFile(Path.ChangeExtension(class1.Name,".generated.cs"));
        if (!String.IsNullOrEmpty(data.EntityNamespace)) {
            
            #line default
            #line hidden
            Write("\r\nnamespace ");
            
            #line 204 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.EntityNamespace));
            
            #line default
            #line hidden
            Write("\r\n{\r\n");
            
            #line 206 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        if (data.Serialization && class1.IsSerializable) {

            
            #line default
            #line hidden
            Write("    [DataContract(");
            
            #line 208 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(dataContractAttributes));
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 209 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        if (class1 == table.BaseClass) {
            if (GenerateDbAttributes) {
            
            #line default
            #line hidden
            Write("    [Table(Name=@\"");
            
            #line 212 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            Write("\")]\r\n");
            
            #line 213 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            foreach(var subclass in data.TableClasses.Where(c => c.Table == table)) {
                if (!String.IsNullOrEmpty(subclass.InheritanceCode)) {
            
            #line default
            #line hidden
            Write("    [InheritanceMapping(Code=@\"");
            
            #line 216 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(subclass.InheritanceCode));
            
            #line default
            #line hidden
            Write("\", Type=typeof(");
            
            #line 216 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(subclass.Name));
            
            #line default
            #line hidden
            Write(")");
            
            #line 216 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 if (subclass.IsInheritanceDefault) {
            
            #line default
            #line hidden
            Write(", IsDefault=true");
            
            #line 216 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 217 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
                if (data.Serialization && subclass.IsSerializable) {

            
            #line default
            #line hidden
            Write("    [KnownType(typeof(");
            
            #line 219 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(subclass.Name));
            
            #line default
            #line hidden
            Write("))]\r\n");
            
            #line 220 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            }

            
            #line default
            #line hidden
            Write("    ");
            
            #line 222 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(class1.TypeAttributes)));
            
            #line default
            #line hidden
            Write("partial class ");
            
            #line 222 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.Name));
            
            #line default
            #line hidden
            Write(" :");
            
            #line 222 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (!String.IsNullOrEmpty(data.EntityBase)) {
            
            #line default
            #line hidden
            Write(" ");
            
            #line 222 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.EntityBase));
            
            #line default
            #line hidden
            Write(", ");
            
            #line 222 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(@" INotifyPropertyChanging, INotifyPropertyChanged
    {
        #region Property Change Event Handling
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;

        ");
            
            #line 230 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(class1.PropertyChangeAccess)));
            
            #line default
            #line hidden
            Write("void SendPropertyChanging()\r\n        {\r\n            if (PropertyChanging != null)" +
                    " {\r\n                PropertyChanging(this, emptyChangingEventArgs);\r\n           " +
                    " }\r\n        }\r\n\r\n        ");
            
            #line 237 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(class1.PropertyChangeAccess)));
            
            #line default
            #line hidden
            Write("void SendPropertyChanged(String propertyName)\r\n        {\r\n            if (Propert" +
                    "yChanged != null) {\r\n                PropertyChanged(this, new PropertyChangedEv" +
                    "entArgs(propertyName));\r\n            }\r\n        }\r\n        #endregion\r\n\r\n");
            
            #line 245 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        } else {

            
            #line default
            #line hidden
            Write("    ");
            
            #line 246 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(class1.TypeAttributes)));
            
            #line default
            #line hidden
            Write("partial class ");
            
            #line 246 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.Name));
            
            #line default
            #line hidden
            Write(" : ");
            
            #line 246 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.SuperClass.Name));
            
            #line default
            #line hidden
            Write("\r\n    {\r\n");
            
            #line 248 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
            
            #line default
            #line hidden
            Write("        #region Extensibility Method Definitions\r\n        partial void OnLoaded()" +
                    ";\r\n        partial void OnValidate(ChangeAction action);\r\n");
            
            #line 252 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        if (class1.HasPrimaryKey) {
            
            #line default
            #line hidden
            Write("        partial void OnCreated();\r\n");
            
            #line 254 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
            
            #line default
            #line hidden
            Write("        #endregion\r\n\r\n        #region Construction\r\n        public ");
            
            #line 258 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.Name));
            
            #line default
            #line hidden
            Write("()\r\n        {\r\n");
            
            #line 260 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        if (data.Serialization) {

            
            #line default
            #line hidden
            Write("            Initialize();\r\n        }\r\n\r\n        private void Initialize()\r\n      " +
                    "  {\r\n");
            
            #line 266 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        foreach(var association in class1.Associations) {

            
            #line default
            #line hidden
            Write("            ");
            
            #line 268 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(" = ");
            
            #line 268 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

            if (association.IsMany) {
                
            
            #line default
            #line hidden
            Write("new EntitySet<");
            
            #line 270 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(">(attach_");
            
            #line 270 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write(", detach_");
            
            #line 270 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 271 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            } else {
                
            
            #line default
            #line hidden
            Write("default(EntityRef<");
            
            #line 272 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(">);\r\n");
            
            #line 273 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
        }
        if (class1.HasPrimaryKey) {
            
            #line default
            #line hidden
            Write("            OnCreated();\r\n");
            
            #line 277 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
            
            #line default
            #line hidden
            Write("        }\r\n        #endregion\r\n\r\n");
            
            #line 281 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        var dataMemberIndex = 1;
        if (class1.Columns.Count > 0) {

            
            #line default
            #line hidden
            Write("        #region Column Mappings\r\n");
            
            #line 284 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            foreach(var column in class1.Columns) {
            
            #line default
            #line hidden
            Write("        partial void On");
            
            #line 285 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("Changing(");
            
            #line 285 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.Type)));
            
            #line default
            #line hidden
            Write(" value);\r\n        partial void On");
            
            #line 286 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("Changed();\r\n        private ");
            
            #line 287 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.StorageType)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 287 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            
            #line 287 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
 if (column.IsReadOnly) {
            
            #line default
            #line hidden
            Write(" = default(");
            
            #line 287 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.StorageType)));
            
            #line default
            #line hidden
            Write(")");
            
            #line 287 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(";\r\n");
            
            #line 288 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
              if (GenerateDbAttributes) {

            
            #line default
            #line hidden
            Write("        [Column(Storage=@\"");
            
            #line 289 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 289 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

                    if (column.Name != column.Member) {
            
            #line default
            #line hidden
            Write(", Name=@\"");
            
            #line 290 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 290 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.AutoSync != AutoSync.Default) {
            
            #line default
            #line hidden
            Write(", AutoSync=AutoSync.");
            
            #line 291 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.AutoSync.ToString()));
            
            #line default
            #line hidden
            
            #line 291 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (!String.IsNullOrEmpty(column.DbType)) {
            
            #line default
            #line hidden
            Write(", DbType=@\"");
            
            #line 292 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.DbType));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 292 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.IsPrimaryKey) {
            
            #line default
            #line hidden
            Write(", IsPrimaryKey=true");
            
            #line 293 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.IsDiscriminator) {
            
            #line default
            #line hidden
            Write(", IsDiscriminator=true");
            
            #line 294 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.IsDbGenerated) {
            
            #line default
            #line hidden
            Write(", IsDbGenerated=true");
            
            #line 295 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.IsVersion) {
            
            #line default
            #line hidden
            Write(", IsVersion=true");
            
            #line 296 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (!column.CanBeNull && !column.IsPrimaryKey) {
            
            #line default
            #line hidden
            Write(", CanBeNull=false");
            
            #line 297 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (column.UpdateCheck != UpdateCheck.Always) {
            
            #line default
            #line hidden
            Write(", UpdateCheck=UpdateCheck.");
            
            #line 298 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.UpdateCheck.ToString()));
            
            #line default
            #line hidden
            
            #line 298 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                    if (!String.IsNullOrEmpty(column.Expression)) {
            
            #line default
            #line hidden
            Write(", Expression=@\"");
            
            #line 299 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Expression));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 299 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
        
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 301 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
              }
                if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {

            
            #line default
            #line hidden
            Write("        [DataMember(Order=");
            
            #line 303 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(dataMemberIndex++));
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 304 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }

            
            #line default
            #line hidden
            Write("        ");
            
            #line 305 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.MemberAttributes)));
            
            #line default
            #line hidden
            
            #line 305 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.Type)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 305 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("\r\n        {\r\n            get { return ");
            
            #line 307 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.StorageValue));
            
            #line default
            #line hidden
            Write("; }\r\n");
            
            #line 308 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                if (!column.IsReadOnly) { 
            
            #line default
            #line hidden
            Write("            set {\r\n                if (");
            
            #line 310 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.StorageValue));
            
            #line default
            #line hidden
            Write(" != value) {\r\n");
            
            #line 311 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    if (column.ForeignKeyAssociations.Count > 0) {
            
            #line default
            #line hidden
            Write("                    if (");
            
            #line 312 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(String.Join(" || ", column.ForeignKeyAssociations.Select(a => a.Storage + ".HasLoadedOrAssignedValue").ToArray())));
            
            #line default
            #line hidden
            Write(") {\r\n                        throw new ForeignKeyReferenceAlreadyHasValueExceptio" +
                    "n();\r\n                    }\r\n");
            
            #line 315 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    }
            
            #line default
            #line hidden
            Write("                    On");
            
            #line 316 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("Changing(value);\r\n                    SendPropertyChanging();\r\n                  " +
                    "  ");
            
            #line 318 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.StorageValue));
            
            #line default
            #line hidden
            Write(" = value;\r\n                    SendPropertyChanged(\"");
            
            #line 319 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("\");\r\n                    On");
            
            #line 320 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write("Changed();\r\n                }\r\n            }\r\n");
            
            #line 323 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
            
            #line default
            #line hidden
            Write("        }\r\n\r\n");
            
            #line 326 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            
            #line default
            #line hidden
            Write("        #endregion\r\n");
            
            #line 328 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        var needsSerializationFlag = class1.IsSerializable && class1.Associations.Any(a => !a.ManagesKeys);
        if (class1.Associations.Count > 0) {

            
            #line default
            #line hidden
            Write("        #region Associations\r\n");
            
            #line 333 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            foreach(var association in class1.Associations) {
            
            #line default
            #line hidden
            Write("        private Entity");
            
            #line 334 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture((association.IsMany) ? "Set" : "Ref"));
            
            #line default
            #line hidden
            Write("<");
            
            #line 334 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write("> ");
            
            #line 334 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(";\r\n");
            
            #line 335 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                if (GenerateDbAttributes) { 
            
            #line default
            #line hidden
            Write("        [Association(Name=@\"");
            
            #line 336 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Name));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 336 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

            
            
            #line default
            #line hidden
            Write(", Storage=@\"");
            
            #line 337 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 337 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

                      if (association.ThisKeyMembers != null) {
            
            #line default
            #line hidden
            Write(", ThisKey=@\"");
            
            #line 338 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(String.Join(",", association.ThisKeyMembers)));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 338 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                      if (association.OtherKeyMembers != null) {
            
            #line default
            #line hidden
            Write(", OtherKey=@\"");
            
            #line 339 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(String.Join(",", association.OtherKeyMembers)));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 339 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                      if (association.IsForeignKey) {
            
            #line default
            #line hidden
            Write(", IsForeignKey=true");
            
            #line 340 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                      if (association.IsUnique) {
            
            #line default
            #line hidden
            Write(", IsUnique=true, IsForeignKey=false");
            
            #line 341 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                      if (association.DeleteOnNull) {
            
            #line default
            #line hidden
            Write(", DeleteOnNull=true");
            
            #line 342 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                      if (association.DeleteRule != null) {
            
            #line default
            #line hidden
            Write(", DeleteRule=@\"");
            
            #line 343 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.DeleteRule));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 343 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
        
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 345 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
              }
                var serialization = association.IsSerializable && data.Serialization &&
                    (options.SerializeDataContractSP1 || !association.ManagesKeys);
                if (serialization) {

            
            #line default
            #line hidden
            Write("        [DataMember(Order=");
            
            #line 349 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(dataMemberIndex++));
            
            #line default
            #line hidden
            Write(", EmitDefaultValue=false)]\r\n");
            
            #line 350 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
                if (!association.IsMany) {
            
            #line default
            #line hidden
            Write("        ");
            
            #line 352 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(association.MemberAttributes)));
            
            #line default
            #line hidden
            
            #line 352 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 352 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write("\r\n        {\r\n            get {\r\n");
            
            #line 355 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    if (needsSerializationFlag && serialization) {
            
            #line default
            #line hidden
            Write("                if (serializing && !");
            
            #line 356 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".HasLoadedOrAssignedValue) {\r\n                    return null;\r\n                }" +
                    "\r\n");
            
            #line 359 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    }
            
            #line default
            #line hidden
            Write("                return ");
            
            #line 360 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".Entity;\r\n            }\r\n            set {\r\n                ");
            
            #line 363 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(" previousValue = ");
            
            #line 363 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".Entity;\r\n                if ((previousValue != value)");
            
            #line 364 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (association.OtherSide != null) {
            
            #line default
            #line hidden
            Write(" || (!");
            
            #line 364 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".HasLoadedOrAssignedValue)");
            
            #line 364 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(") {\r\n                    SendPropertyChanging();\r\n");
            
            #line 366 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    if (association.OtherSide != null) {
            
            #line default
            #line hidden
            Write("                    if (previousValue != null) {\r\n                        ");
            
            #line 368 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".Entity = null;\r\n                        previousValue.");
            
            #line 369 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.OtherSide.Member));
            
            #line default
            #line hidden
            
            #line 369 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (!association.OtherSide.IsMany) {
            
            #line default
            #line hidden
            Write(" = null");
            
            #line 369 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
} else {
            
            #line default
            #line hidden
            Write(".Remove(this)");
            
            #line 369 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(";\r\n                    }\r\n");
            
            #line 371 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    }

            
            #line default
            #line hidden
            Write("                    ");
            
            #line 372 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".Entity = value;\r\n");
            
            #line 373 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    if (association.OtherSide != null || association.ManagesKeys) {
            
            #line default
            #line hidden
            Write("                    if (value != null) {\r\n");
            
            #line 375 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                        if (association.OtherSide != null) {
            
            #line default
            #line hidden
            Write("                        value.");
            
            #line 376 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.OtherSide.Member));
            
            #line default
            #line hidden
            
            #line 376 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (!association.OtherSide.IsMany) {
            
            #line default
            #line hidden
            Write(" = this");
            
            #line 376 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
} else {
            
            #line default
            #line hidden
            Write(".Add(this)");
            
            #line 376 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(";\r\n");
            
            #line 377 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                        }
                        if (association.ManagesKeys) {
                            for(var keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {
            
            #line default
            #line hidden
            Write("                        ");
            
            #line 380 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.ThisKey[keyIdx].Storage));
            
            #line default
            #line hidden
            Write(" = value.");
            
            #line 380 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.OtherKey[keyIdx].Member));
            
            #line default
            #line hidden
            Write(";\r\n");
            
            #line 381 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                            }
            
            #line default
            #line hidden
            Write("                    }\r\n                    else {\r\n");
            
            #line 384 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                            for(var keyIdx=0;keyIdx<association.ThisKey.Count();keyIdx++) {

            
            #line default
            #line hidden
            Write("                             ");
            
            #line 385 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.ThisKey[keyIdx].Storage));
            
            #line default
            #line hidden
            Write(" = default(");
            
            #line 385 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(association.ThisKey[keyIdx].Type)));
            
            #line default
            #line hidden
            Write(");\r\n");
            
            #line 386 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                            }
                        }

            
            #line default
            #line hidden
            Write("                    }\r\n");
            
            #line 389 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                         }
            
            #line default
            #line hidden
            Write("                    SendPropertyChanged(\"");
            
            #line 390 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write("\");\r\n                }\r\n            }\r\n        }\r\n\r\n");
            
            #line 395 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                } else {
            
            #line default
            #line hidden
            Write("        ");
            
            #line 396 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(association.MemberAttributes)));
            
            #line default
            #line hidden
            Write("EntitySet<");
            
            #line 396 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write("> ");
            
            #line 396 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write("\r\n        {\r\n            get {\r\n");
            
            #line 399 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    if (needsSerializationFlag && serialization) {
            
            #line default
            #line hidden
            Write("                if (serializing && !");
            
            #line 400 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".HasLoadedOrAssignedValues) {\r\n                    return null;\r\n                " +
                    "}\r\n");
            
            #line 403 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                    } 
            
            #line default
            #line hidden
            Write("                return ");
            
            #line 404 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(";\r\n            }\r\n            set {\r\n                ");
            
            #line 407 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Storage));
            
            #line default
            #line hidden
            Write(".Assign(value);\r\n            }\r\n        }\r\n\r\n        private void attach_");
            
            #line 411 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write("(");
            
            #line 411 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(" entity)\r\n        {\r\n            SendPropertyChanging();\r\n            entity.");
            
            #line 414 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.OtherSide.Member));
            
            #line default
            #line hidden
            Write(" = this;\r\n        }\r\n\r\n        private void detach_");
            
            #line 417 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Member));
            
            #line default
            #line hidden
            Write("(");
            
            #line 417 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.Type.Name));
            
            #line default
            #line hidden
            Write(" entity)\r\n        {\r\n            SendPropertyChanging();\r\n            entity.");
            
            #line 420 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(association.OtherSide.Member));
            
            #line default
            #line hidden
            Write(" = null;\r\n        }\r\n\r\n");
            
            #line 423 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
                }
            }
            
            #line default
            #line hidden
            Write("        #endregion\r\n");
            
            #line 426 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        if (data.Serialization) {
            
            #line default
            #line hidden
            Write("\r\n        #region Serialization\r\n");
            
            #line 430 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            if (needsSerializationFlag) {
            
            #line default
            #line hidden
            Write(@"        private bool serializing;

        [OnSerializing()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerializing(StreamingContext context)
        {
            serializing = true;
        }

        [OnSerialized()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public void OnSerialized(StreamingContext context)
        {
            serializing = false;
        }

");
            
            #line 447 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }
            
            #line default
            #line hidden
            Write("        [OnDeserializing()]\r\n        [EditorBrowsableAttribute(EditorBrowsableSta" +
                    "te.Never)]\r\n        public ");
            
            #line 450 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
if (class1 != table.BaseClass) {
            
            #line default
            #line hidden
            Write("new");
            
            #line 450 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
            
            #line default
            #line hidden
            Write(" void OnDeserializing(StreamingContext context)\r\n        {\r\n            Initializ" +
                    "e();\r\n        }\r\n        #endregion\r\n");
            
            #line 455 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }

            
            #line default
            #line hidden
            Write("    }\r\n");
            
            #line 457 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        if (!String.IsNullOrEmpty(data.EntityNamespace)) {
            
            #line default
            #line hidden
            Write("}\r\n");
            
            #line 459 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        manager.EndBlock();
    }
}
if (data.FunctionClasses.Count > 0) {
    foreach(var class1 in data.FunctionClasses) {
        manager.StartNewFile(Path.ChangeExtension(class1.Name,".generated.cs"));
        if(!String.IsNullOrEmpty(data.EntityNamespace)){
            
            #line default
            #line hidden
            Write("\r\nnamespace ");
            
            #line 468 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(data.EntityNamespace));
            
            #line default
            #line hidden
            Write("\r\n{\r\n");
            
            #line 470 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        if (data.Serialization) {

            
            #line default
            #line hidden
            Write("    [DataContract(");
            
            #line 472 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(dataContractAttributes));
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 473 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        } 
            
            #line default
            #line hidden
            Write("    ");
            
            #line 474 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(class1.TypeAttributes)));
            
            #line default
            #line hidden
            Write("partial class ");
            
            #line 474 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(class1.Name));
            
            #line default
            #line hidden
            Write("\r\n    {\r\n");
            
            #line 476 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        var dataMemberIndex = 1;
        foreach(var column in class1.Columns) {
            
            #line default
            #line hidden
            Write("\r\n        private ");
            
            #line 479 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.Type)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 479 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write(";\r\n        [Column(Storage=@\"");
            
            #line 480 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 480 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

                if (column.Name != column.Member) {
            
            #line default
            #line hidden
            Write(", Name=@\"");
            
            #line 481 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 481 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                if (!String.IsNullOrEmpty(column.DbType)) {
            
            #line default
            #line hidden
            Write(", DbType=@\"");
            
            #line 482 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.DbType));
            
            #line default
            #line hidden
            Write("\"");
            
            #line 482 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
                if (!column.CanBeNull && !column.IsPrimaryKey) {
            
            #line default
            #line hidden
            Write(", CanBeNull=false");
            
            #line 483 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
}
        
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 485 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            if (data.Serialization && ((column.MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public)) {

            
            #line default
            #line hidden
            Write("        [DataMember(Order=");
            
            #line 486 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(dataMemberIndex++));
            
            #line default
            #line hidden
            Write(")]\r\n");
            
            #line 487 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            }

            
            #line default
            #line hidden
            Write("        ");
            
            #line 488 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.MemberAttributes)));
            
            #line default
            #line hidden
            
            #line 488 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(code.Format(column.Type)));
            
            #line default
            #line hidden
            Write(" ");
            
            #line 488 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Member));
            
            #line default
            #line hidden
            Write(" {\r\n            get { return ");
            
            #line 489 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write("; }\r\n            set {\r\n                if (");
            
            #line 491 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write(" != value) {\r\n                    ");
            
            #line 492 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(column.Storage));
            
            #line default
            #line hidden
            Write(" = value;\r\n                }\r\n            }\r\n        }\r\n");
            
            #line 496 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        } 
            
            #line default
            #line hidden
            Write("    }\r\n");
            
            #line 498 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        if (!String.IsNullOrEmpty(data.EntityNamespace)) {
            
            #line default
            #line hidden
            Write("}\r\n");
            
            #line 500 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"
        }
        manager.EndBlock();
    }
}
manager.StartFooter();
            
            #line default
            #line hidden
            Write("#pragma warning restore 1591");
            
            #line 505 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\LinqToSqlGenerator.tt"

manager.EndBlock();
manager.Process(options.FilePerEntity);
            
            #line default
            #line hidden
            return GenerationEnvironment.ToString();
        }
        private ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual ITextTemplatingEngineHost Host
        {
            get => hostValue;
            set => hostValue = value;
        }
        
        #line 18 "C:\ProxyDocuments\Projects\QPQ\Assembling\T4\L2ST4.ttinclude"

// L2ST4 - LINQ to SQL templates for T4 v0.86 - http://www.codeplex.com/l2st4
// Copyright (c) Microsoft Corporation.  All rights reserved.
// This source code is made available under the terms of the Microsoft Public License (MS-PL)

// DBML Database element > code DataContext class
class Data
{
    public XNamespace NS = "http://schemas.microsoft.com/linqtosql/dbml/2007";
    public String BaseClassName { get; private set; }
    public String ConnectSettingsObject { get; private set; }
    public String ConnectSettingsProperty { get; private set; }
    public String ContextName { get; private set; }
    public String ContextNamespace { get; set; }
    public String DatabaseName { get; private set; }
    public String DbmlFileName { get; private set; }
    public String EntityBase { get; private set; }
    public String EntityNamespace { get; set; }
    public List<Function> Functions { get; private set; }
    public List<FunctionClass> FunctionClasses { get; private set; }
    public Boolean Serialization { get; private set; }
    public String SpecifiedContextNamespace { get; private set; }
    public String SpecifiedEntityNamespace { get; private set; }
    public TypeAttributes TypeAttributes { get; private set; }
    public List<Table> Tables { get; private set; }
    public List<TableClass> TableClasses { get; private set; }

    public Data(String dbmlFileName) {
        DbmlFileName = dbmlFileName;
        if (!File.Exists(DbmlFileName))
        {
            throw new Exception(String.Format("DBML file '{0}' could not be found.", DbmlFileName));
        }

        var xe = XDocument.Load(DbmlFileName).Root;
        TableClasses = new List<TableClass>();
        FunctionClasses = new List<FunctionClass>();

        foreach(var connection in xe.Elements(NS + "Connection")) {
            ConnectSettingsObject = (String) connection.Attribute("SettingsObjectName");
            ConnectSettingsProperty = (String) connection.Attribute("SettingsPropertyName");
        }
        BaseClassName = (String) xe.Attribute("BaseType") ?? "DataContext";
        ContextName = (String) xe.Attribute("Class");
        ContextNamespace = SpecifiedContextNamespace = (String) xe.Attribute("ContextNamespace");
        DatabaseName = (String) xe.Attribute("Name") ?? "";
        EntityBase = (String) xe.Attribute("EntityBase");
        EntityNamespace = SpecifiedEntityNamespace = (String) xe.Attribute("EntityNamespace");
        Serialization = (String) xe.Attribute("Serialization") == "Unidirectional";
        TypeAttributes = Class.DecodeAccess((String) xe.Attribute("AccessModifier")) | Class.DecodeModifier((String) xe.Attribute("Modifier"));
        Tables = (from t in xe.Elements(NS + "Table")
            select new Table(this, t)).ToList();
        Functions = (from f in xe.Elements(NS + "Function")
            select new Function(this, f)).ToList();
    }

    static internal Type GetType(String typeName, Boolean canBeNull) {
        Type type = null;
        switch(typeName) {
            case "System.Xml.Linq.XElement": type = typeof(XElement); break;
            case "System.Data.Linq.Binary": type = typeof(Binary); break;
            case "object": type = typeof(Object); break;
            default: type = Type.GetType(typeName); break;
        }
        if (type == null)
        {
            type = new TypeStub(typeName);
        }
        if (type.IsValueType && canBeNull)
        {
            type = typeof(Nullable<>).MakeGenericType(type);
        }
        return type;
    }
}

// DBML Table element > Base entity class, events & property on DataContext class
class Table
{
    public TableClass BaseClass => Classes.First();

    public IEnumerable<TableClass> Classes {
        get { return Data.TableClasses.Where(c => c.Table == this); }
    }
    public Data Data { get; private set; }
    private String member;
    public String Member {
        get => member ?? Name;
        set => member = value;
    }
    public String Name { get; set; }
    public List<TableOperation> Operations { get; private set; }
    public TypeAttributes TypeAttributes { get; private set; }

    public Table(Data data, XElement xe) {
        Data = data;
        Name = (String) xe.Attribute("Name");
        Member = (String) xe.Attribute("Member");
        Data.TableClasses.AddRange(from c in xe.Elements(Data.NS + "Type")
            select new TableClass(this, c));
        Operations = new List<TableOperation>();
        TypeAttributes = Class.DecodeAccess((String) xe.Attribute("AccessModifier")) | Class.DecodeModifier((String) xe.Attribute("Modifier"));
        foreach(OperationType operationType in Enum.GetValues(typeof(OperationType)))
        {
            Operations.AddRange((from o in xe.Elements(Data.NS + operationType.ToString() + "Function")
                select new TableOperation(this, o)).ToList());
        }
    }
}

// DBML Type element > Entity class, subclasses or stored procedure return type
class Class
{
    public Class SuperClass { get; protected set; }
    public List<Column> Columns { get; private set; }
    public Data Data {get; private set; }
    public String Id { get; private set; }
    public String InheritanceCode { get; private set; }
    public Boolean IsInheritanceDefault { get; private set; }
    public Boolean IsSerializable => (TypeAttributes & TypeAttributes.VisibilityMask) == TypeAttributes.Public;
    protected String name;
    public virtual String Name {
        get => name;
        set => name = value;
    }
    public String QualifiedName => (String.IsNullOrEmpty(Data.EntityNamespace) || (Data.EntityNamespace == Data.ContextNamespace))
        ? Name : Data.EntityNamespace + '.' + Name;

    public TypeAttributes TypeAttributes { get; private set; }

    public Class(Data data, XElement xe) {
        Data = data;
        Id = (String) xe.Attribute("Id");
        InheritanceCode = (String) xe.Attribute("InheritanceCode");
        IsInheritanceDefault = (Boolean ?) xe.Attribute("IsInheritanceDefault") ?? false;
        Name = (String) xe.Attribute("Name");
        TypeAttributes = DecodeAccess((String) xe.Attribute("AccessModifier")) | DecodeModifier((String) xe.Attribute("Modifier"));
        Columns = (from c in xe.Elements(Data.NS + "Column")
            select new Column(this, c)).ToList();
    }

    internal static TypeAttributes DecodeAccess(String access) {
        switch(access) {
            case "Private": return TypeAttributes.NestedPrivate;
            case "Internal": return TypeAttributes.NestedAssembly;
            case "Protected": return TypeAttributes.NestedFamily;
            case "ProtectedInternal": return TypeAttributes.NestedFamORAssem;
            default: return TypeAttributes.Public;
        }
    }

    internal static TypeAttributes DecodeModifier(String modifier) {
        switch(modifier) {
            case "Abstract": return TypeAttributes.Abstract;
            case "Sealed": return TypeAttributes.Sealed;
            default: return TypeAttributes.Class;
        }
    }
}

// DBML Type element > Classes and subclasses that map to tables
class TableClass : Class
{
    public List<Association> Associations { get; private set; }
    public Boolean HasPrimaryKey {
        get { return Columns.Any(c => c.IsPrimaryKey); }
    }
    public override String Name { get; set; }
    public IList<Column> PrimaryKey {
        get { return Columns.Where(c => c.IsPrimaryKey).ToList(); }
    }
    public MemberAttributes PropertyChangeAccess => ((TypeAttributes & TypeAttributes.Sealed) != 0) ? MemberAttributes.Private | MemberAttributes.Final : MemberAttributes.Family;

    public IEnumerable<TableClass> Subclasses {
        get { return Table.Data.TableClasses.Where(c => c.SuperClass == this); }
    }
    public Table Table { get; private set; }

    public TableClass(TableClass superClass, XElement xe) : this(superClass.Table, xe) {
        SuperClass = superClass;
    }

    public TableClass(Table table, XElement xe) : base(table.Data, xe) {
        Table = table;
        Associations = (from a in xe.Elements(Data.NS + "Association")
            select new Association(this, a)).ToList();
        Table.Data.TableClasses.AddRange(from c in xe.Elements(Data.NS + "Type")
            select new TableClass(this, c));
    }
}

// DBML Type > Classes that map to stored procedure return types
class FunctionClass : Class
{
    public Function Function { get; set; }

    public FunctionClass(Function function, XElement xe) : base(function.Data, xe) {
        Function = function;
    }
}

// DBML type Column > Properties on a class
class Column
{
    private String member, typeName, storage;

    private AutoSync autoSync;
    public AutoSync AutoSync {
        get {
            if (IsDbGenerated)
            {
                if (IsPrimaryKey)
                {
                    return AutoSync.OnInsert;
                }

                return AutoSync.Always;
            }

            return autoSync;
        }
        private set => autoSync = value;
    }
    public Boolean CanBeNull { get; private set; }
    public Class Class { get; private set; }
    public String DbType { get; private set; }
    public String Expression { get; private set; }
    private Boolean isDbGenerated;
    public Boolean IsDbGenerated {
        get => (!String.IsNullOrEmpty(Expression) || IsVersion) ? true : isDbGenerated;
        private set => isDbGenerated = value;
    }
    public Boolean IsDelayLoaded { get; private set; }
    public Boolean IsDiscriminator { get; private set; }
    public List<Association> ForeignKeyAssociations {
        get
        {
            if (Class is TableClass) {
                return ((TableClass)Class).Associations.Where(a => a.ThisKey.Contains(this) && a.IsForeignKey).ToList();
            }

            return new List<Association>();
        }
    }
    public Boolean IsPrimaryKey { get; private set; }
    private Boolean isReadOnly;
    public Boolean IsReadOnly {
        get => (Class.Data.Serialization) ? false : isReadOnly;
        private set => isReadOnly = value;
    }
    public Boolean IsVersion { get; private set; }
    public String Member {
        get => member + ((member == Class.Name) ? "1" : "");
        set => member = value;
    }
    public MemberAttributes MemberAttributes { get; private set; }
    public String Name { get; private set; }
    public String Storage {
        get => String.IsNullOrEmpty(storage) ? "_" + Member : storage;
        set => storage = value;
    }
    public Type StorageType => (IsDelayLoaded) ? typeof(Link<>).MakeGenericType(Type) : Type;

    public String StorageValue => (IsDelayLoaded) ? Storage + ".Value" : Storage;

    public Type Type => Data.GetType(typeName, CanBeNull);
    private UpdateCheck updateCheck;
    public UpdateCheck UpdateCheck {
        get => (IsReadOnly) ? UpdateCheck.Never : updateCheck;
        private set => updateCheck = value;
    }

    public Column(Class class1, XElement xe) {
        Class = class1;
        Name = (String) xe.Attribute("Name") ?? "";
        Member = (String) xe.Attribute("Member") ?? Name;
        typeName = xe.Attribute("Type").Value;
        CanBeNull = (Boolean?) xe.Attribute("CanBeNull") ?? false;
        DbType = (String) xe.Attribute("DbType") ?? "";
        Expression = (String) xe.Attribute("Expression") ?? "";
        IsDbGenerated = (Boolean?) xe.Attribute("IsDbGenerated") ?? (IsVersion);
        IsDelayLoaded = (Boolean?) xe.Attribute("IsDelayLoaded") ?? false;
        IsDiscriminator = (Boolean?) xe.Attribute("IsDiscriminator") ?? false;
        IsPrimaryKey = (Boolean?) xe.Attribute("IsPrimaryKey") ?? false;
        IsReadOnly = (Boolean?) xe.Attribute("IsReadOnly") ?? false;
        IsVersion = (Boolean?) xe.Attribute("IsVersion") ?? false;
        Storage = (String) xe.Attribute("Storage") ?? "";
        var autoSyncDefault = (IsDbGenerated) ? AutoSync.OnInsert : AutoSync.Default;
        AutoSync = Util.ParseEnum((String) xe.Attribute("AutoSync"), (IsVersion) ? AutoSync.Always : autoSyncDefault);
        UpdateCheck = Util.ParseEnum((String) xe.Attribute("UpdateCheck"), (IsVersion || IsPrimaryKey) ? UpdateCheck.Never : UpdateCheck.Always);
        MemberAttributes = Util.DecodeMemberAccess((String) xe.Attribute("AccessModifier")) | Util.DecodeMemberModifier((String) xe.Attribute("Modifier"));
    }
}

// DBML Association element > EntitySet or EntityRef between two table-mapped classes
class Association
{
    private TableClass thisClass;
    private String typeName, storage;

    public Association OtherSide {
        get { return Type.Associations.Find(a => a.Name == Name && a != this); }
    }
    public Boolean DeleteOnNull { get; private set; }
    public String DeleteRule { get; private set; }
    public Boolean IsForeignKey { get; private set; }
    public Boolean IsMany { get; private set; }
    public Boolean IsSerializable => ((MemberAttributes & MemberAttributes.AccessMask) == MemberAttributes.Public);

    public Boolean IsUnique => (!IsMany && !IsForeignKey);
    public Boolean ManagesKeys => IsForeignKey;
    public String Member { get; private set; }
    public MemberAttributes MemberAttributes { get; private set; }
    public String Name { get; private set; }
    public IList<Column> OtherKey {
        get { return OtherKeyMembers.Select(o => Type.Columns.Single(c => c.Member == o)).ToList(); }
    }
    private String[] otherKeyMembers;
    public String[] OtherKeyMembers {
        get { return (otherKeyMembers != null) ? otherKeyMembers : Type.PrimaryKey.Select(p => p.Member).ToArray(); }
        set => otherKeyMembers = value;
    }
    public String Storage => storage ?? "_" + Member;

    public IList<Column> ThisKey {
        get { return ThisKeyMembers.Select(o => thisClass.Columns.Single(c => c.Member == o)).ToList(); }
    }
    private String[] thisKeyMembers;
    public String[] ThisKeyMembers {
        get { return (thisKeyMembers != null) ? thisKeyMembers : thisClass.PrimaryKey.Select(p => p.Member).ToArray(); }
        set => thisKeyMembers = value;
    }
    public TableClass Type {
        get { return thisClass.Table.Data.TableClasses.Find(c => c.Name == typeName); }
    }

    public Association(TableClass thisClass, XElement xe) {
        this.thisClass = thisClass;
        typeName = (String) xe.Attribute("Type");
        var thisKey = ((String) xe.Attribute("ThisKey"));
        if (thisKey != null)
        {
            thisKeyMembers = thisKey.Split(',');
        }
        storage = (String) xe.Attribute("Storage");
        var otherKey = ((String) xe.Attribute("OtherKey"));
        if (otherKey != null)
        {
            otherKeyMembers = otherKey.Split(',');
        }
        DeleteOnNull = (Boolean?) xe.Attribute("DeleteOnNull") ?? false;
        DeleteRule = (String) xe.Attribute("DeleteRule");
        IsForeignKey = (xe.Attribute("IsForeignKey") != null);
        Member = (String) xe.Attribute("Member");
        MemberAttributes = Util.DecodeMemberAccess((String) xe.Attribute("AccessModifier")) | Util.DecodeMemberModifier((String) xe.Attribute("Modifier"));
        Name = (String) xe.Attribute("Name");
        var cardinality = (String) xe.Attribute("Cardinality");
        IsMany = (cardinality == null) ? !IsForeignKey : (cardinality.Equals("Many"));
    }
}

// DBML Function element (stored procedure or function) > Method on DataContext
class Function
{
    public List<Class> Classes { get; private set; }
    public Data Data { get; private set; }
    private Boolean? hasMultipleResults;
    public Boolean HasMultipleResults => (hasMultipleResults.HasValue) ? hasMultipleResults.Value : Classes.Count() > 1;
    public String ID { get; private set; }
    public Boolean IsComposable { get; private set; }
    public Boolean IsComposableQuery => IsComposable && Classes.Count > 0;
    public MemberAttributes MemberAttributes { get; private set; }
    public String Method { get; private set; }
    public String Name { get; private set; }
    public List<Parameter> Parameters { get; private set; }
    public Return Return { get; private set; }
    private CodeTypeReference resultType;
    public CodeTypeReference ResultType {
        get {
            if (resultType == null)
            {
                if (Classes.Count == 0)
                {
                    resultType = new CodeTypeReference((Return == null) ? typeof(Object) : Return.Type);
                }
                else
                    if (HasMultipleResults)
                    {
                        resultType = new CodeTypeReference(typeof(IMultipleResults));
                    }
                    else
                    {
                        resultType = new CodeTypeReference(Classes[0].QualifiedName);
                    }
            }
            return resultType;
        }
    }

    private CodeTypeReference returnType;
    public CodeTypeReference ReturnType {
        get {
            if (returnType == null)
            {
                returnType = ResultType;
                if (Classes.Count > 0)
                {
                    if (IsComposable) // Functions are IQueryable<T>
                    {
                        returnType = new CodeTypeReference(typeof(IQueryable<>));
                        returnType.TypeArguments.Add(ResultType);
                    } else {
                        if (!HasMultipleResults) {
                            returnType = new CodeTypeReference(typeof(ISingleResult<>));
                            returnType.TypeArguments.Add(ResultType);
                        }
                    }
                }
            }
            return returnType;
        }
    }

    public Function(Data data, XElement xe) {
        Data = data;
        var hasMultiResultsElement = (String) xe.Attribute("HasMultipleResults");
        if (hasMultiResultsElement != null)
        {
            hasMultipleResults = Boolean.Parse(hasMultiResultsElement);
        }
        ID = (String) xe.Attribute("Id");
        IsComposable = (Boolean ?) xe.Attribute("IsComposable") ?? false;
        Name = (String) xe.Attribute("Name");
        Method = (String) xe.Attribute("Method");
        MemberAttributes = Util.DecodeMemberAccess((String) xe.Attribute("AccessModifier")) | Util.DecodeMemberModifier((String) xe.Attribute("Modifier"));
        Parameters = (from p in xe.Elements(Data.NS + "Parameter")
            select new Parameter(this, p)).ToList();
        Return = (from r in xe.Elements(Data.NS + "Return")
            select new Return(this, r, IsComposable)).SingleOrDefault();
        Classes = new List<Class>();
        foreach(var fxe in xe.Elements(Data.NS + "ElementType")) {
            var idRef = (String) fxe.Attribute("IdRef");
            if (idRef == null) {
                var functionClass = new FunctionClass(this, fxe);
                Classes.Add(functionClass);
                Data.FunctionClasses.Add(functionClass);
            }
            else
            {
                Classes.Add(Data.TableClasses.Single(c => c.Id == idRef));
            }
        }
    }
}

// Stored procedure scalar return type -> Method return type
class Return
{
    private String typeName;
    public String DbType { get; private set; }
    public Function Function { get; private set; }
    public Boolean Nullable { get; private set; }
    public Type Type => Data.GetType(typeName, Nullable);

    public Return(Function function, XElement xe, Boolean nullable) {
        Function = function;
        DbType = (String) xe.Attribute("DbType");
        typeName = (String) xe.Attribute("Type");
        Nullable = nullable;
    }
}

public enum ParameterDirection { In, Out, InOut }
public enum OperationType { Insert, Update, Delete }
public enum ArgumentVersion { Original, New }

// Function parameter -> Method parameter
class Parameter
{
    private String typeName;
    public String DbType { get; private set; }
    public Function Function { get; private set; }
    public String Name { get; private set; }
    public String DbName { get; private set; }
    public ParameterDirection Direction { get; private set; }
    public Type Type => Data.GetType(typeName, true);

    public Parameter(Function function, XElement xe) {
        Function = function;
        DbName = (String) xe.Attribute("Name");
        Name = (String) xe.Attribute("Parameter") ?? DbName;
        DbType = (String) xe.Attribute("DbType");
        typeName = (String) xe.Attribute("Type");
        Direction = Util.ParseEnum((String) xe.Attribute("Direction"), ParameterDirection.In);
    }
}

// Functions associated with a table's CUD operations
class TableOperation
{
    private String functionID;
    private Function function;
    public List<Argument> Arguments { get; private set; }
    public OperationType Type { get; private set; }
    public Function Function {
        get {
            if ((function == null) && (!String.IsNullOrEmpty(functionID)))
            {
                function = Table.Data.Functions.Where(f => f.ID == functionID).SingleOrDefault();
            }
            return function;
        }
        set {
            function = value;
            functionID = null;
        }
    }
    public Table Table { get; private set; }

    public TableOperation(Table table, XElement xe) {
        Table = table;
        functionID = (String) xe.Attribute("FunctionId");
        Type = (OperationType) Enum.Parse(typeof(OperationType), xe.Name.LocalName.Replace("Function",""));
        Arguments = (from a in xe.Elements(Table.Data.NS + "Argument") select new Argument(this, a)).ToList();
    }
}

// Argument to a function
class Argument
{
    private String parameterName;
    private Parameter parameter;
    public TableOperation TableOperation;
    public Parameter Parameter {
        get {
            if ((parameter == null) && (!String.IsNullOrEmpty(parameterName)))
            {
                parameter = TableOperation.Function.Parameters.Single(p => p.Name == parameterName);
            }
            return parameter;
        }
        set {
            parameter = value;
            parameterName = null;
        }
    }
    public String Member { get; private set; }
    public ArgumentVersion Version { get; private set; }

    public Argument(TableOperation tableOperation, XElement xe) {
        TableOperation = tableOperation;
        parameterName = (String) xe.Attribute("Parameter");
        Member = (String) xe.Attribute("Member");
        Version = Util.ParseEnum((String) xe.Attribute("Version"), ArgumentVersion.New);
    }
}

abstract class CodeLanguage
{
    public CodeDomProvider CodeDomProvider { get; protected set; }
    public abstract String GetAccess(MemberAttributes memberAttributes);
    public abstract String GetAccess(TypeAttributes typeAttributes);
    public abstract String GetModifier(MemberAttributes memberAttributes);
    public abstract String GetModifier(TypeAttributes typeAttributes);

    public String Format(Type type) => Format(new CodeTypeReference(type));

    public virtual String ShortenTypeRef(String typeRef) => (typeRef.LastIndexOf('.') != 6) ? typeRef.Replace("System.Data.Linq.","") : typeRef.Replace("System.","");

    public String Format(CodeTypeReference codeTypeRef) => ShortenTypeRef(CodeDomProvider.GetTypeOutput(codeTypeRef));

    public abstract String Format(ParameterDirection direction);

    public String Format(MemberAttributes memberAttributes) => GetAccess(memberAttributes) + GetModifier(memberAttributes);

    public String Format(TypeAttributes typeAttributes) => GetAccess(typeAttributes) + GetModifier(typeAttributes);
}

class CSharpCodeLanguage : CodeLanguage
{
    public CSharpCodeLanguage() {
        CodeDomProvider = new CSharpCodeProvider();
    }

    public override String Format(ParameterDirection direction) {
        switch(direction) {
            case ParameterDirection.InOut: return "ref ";
            case ParameterDirection.Out: return "out ";
            default: return "";
        }
    }

    public override String ShortenTypeRef(String typeRef) {
        if (typeRef.StartsWith("System.Nullable<"))
        {
            typeRef = typeRef.Replace("System.Nullable<","").Replace(">","?");
        }
        return base.ShortenTypeRef(typeRef);
    }

    public override String GetAccess(MemberAttributes memberAttributes) {
        switch(memberAttributes & MemberAttributes.AccessMask) {
            case MemberAttributes.Private: return "private ";
            case MemberAttributes.Public: return "public ";
            case MemberAttributes.Family: return "protected ";
            case MemberAttributes.Assembly: return "internal ";
            case MemberAttributes.FamilyAndAssembly: return "protected internal ";
            default: return memberAttributes.ToString();
        }
    }

    public override String GetAccess(TypeAttributes typeAttributes) {
        switch(typeAttributes & TypeAttributes.VisibilityMask) {
            case TypeAttributes.NestedPrivate: return "private ";
            case TypeAttributes.NestedAssembly: return "internal ";
            case TypeAttributes.NestedFamily: return "protected ";
            case TypeAttributes.NestedFamORAssem: return "protected internal ";
            default: return "public ";
        }
    }

    public override String GetModifier(MemberAttributes memberAttributes) {
        switch(memberAttributes & MemberAttributes.ScopeMask) {
            case MemberAttributes.Final: return "";
            case MemberAttributes.Abstract: return "abstract ";
            case MemberAttributes.Override: return "override ";
            default: return "virtual ";
        }
    }

    public override String GetModifier(TypeAttributes typeAttributes) {
        if ((typeAttributes & TypeAttributes.Abstract) != 0)
        {
            return "abstract ";
        }
        if ((typeAttributes & TypeAttributes.Sealed) != 0)
        {
            return "sealed ";
        }

        return "";
    }
}

class VBCodeLanguage : CodeLanguage
{
    public VBCodeLanguage() {
        CodeDomProvider = new VBCodeProvider();
    }

    public override String Format(ParameterDirection direction) {
        switch(direction) {
            case ParameterDirection.InOut: return "ByRef ";
            case ParameterDirection.Out: return "ByRef ";
            default: return "";
        }
    }

    public override String GetAccess(MemberAttributes memberAttributes) {
        switch(memberAttributes & MemberAttributes.AccessMask) {
            case MemberAttributes.Private: return "Private ";
            case MemberAttributes.Public: return "Public ";
            case MemberAttributes.Family: return "Protected ";
            case MemberAttributes.Assembly: return "Friend ";
            case MemberAttributes.FamilyAndAssembly: return "Protected Friend ";
            default: return memberAttributes.ToString();
        }
    }

    public override String GetAccess(TypeAttributes typeAttributes) {
        switch(typeAttributes & TypeAttributes.VisibilityMask) {
            case TypeAttributes.NestedPrivate: return "Private ";
            case TypeAttributes.NestedAssembly: return "Friend ";
            case TypeAttributes.NestedFamily: return "Protected ";
            case TypeAttributes.NestedFamORAssem: return "protected internal ";
            default: return "Public ";
        }
    }

    public override String GetModifier(MemberAttributes memberAttributes) {
        switch(memberAttributes & MemberAttributes.ScopeMask) {
            case MemberAttributes.Final: return "";
            case MemberAttributes.Abstract: return "MustOverride ";
            case MemberAttributes.Override: return "Override ";
            default: return "Overridable ";
        }
    }

    public override String GetModifier(TypeAttributes typeAttributes) {
        if ((typeAttributes & TypeAttributes.Abstract) != 0)
        {
            return "MustInherit ";
        }
        if ((typeAttributes & TypeAttributes.Sealed) != 0)
        {
            return "NotInheritable ";
        }

        return "";
    }
}

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) => (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);

    public void StartNewFile(String name) {
        if (name == null)
        {
            throw new ArgumentNullException("name");
        }

        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
        {
            return;
        }

        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
        {
            files.Add(CurrentBlock);
        }
        currentBlock = null;
    }

    public virtual void Process(Boolean split) {
        if (split) {
            EndBlock();
            var headerText = template.ToString(header.Start, header.Length);
            var footerText = template.ToString(footer.Start, footer.Length);
            var outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(var block in files) {
                var fileName = Path.Combine(outputPath, block.Name);
                var content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
        {
            File.WriteAllText(fileName, content);
        }
    }

    public virtual String GetCustomToolNamespace(String fileName) => null;

    public virtual String DefaultProjectNamespace => null;

    protected Boolean IsFileContentDifferent(String fileName, String newContent) => !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get => currentBlock;
        set {
            if (CurrentBlock != null)
            {
                EndBlock();
            }
            if (value != null)
            {
                value.Start = template.Length;
            }
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private ProjectItem templateProjectItem;
        private DTE dte;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;

        public override String DefaultProjectNamespace => templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();

        public override String GetCustomToolNamespace(String fileName) => dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();

        public override void Process(Boolean split) {
            if (templateProjectItem.ProjectItems == null)
            {
                return;
            }

            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
            {
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            }

            dte = (DTE) hostServiceProvider.GetService(typeof(DTE));
            if (dte == null)
            {
                throw new ArgumentNullException("Could not obtain DTE from host");
            }

            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(ProjectItem templateProjectItem, IEnumerable<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";

            foreach(ProjectItem projectItem in templateProjectItem.ProjectItems)
            {
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);
            }

            // Remove unused items from the project
            foreach(var pair in projectFiles)
            {
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                {
                    pair.Value.Delete();
                }
            }

            // Add missing files to the project
            foreach(var fileName in keepFileNameSet)
            {
                if (!projectFiles.ContainsKey(fileName))
                {
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
                }
            }
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
            {
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
            }
        }
    }
}

// Methods that deserve a better home
public static class Util
{
    public static T ParseEnum<T>(String value, T defaultValue) where T:struct {
        try { return (T)Enum.Parse(typeof(T), value); }
        catch { return defaultValue; }
    }

    public static MemberAttributes DecodeMemberAccess(String access) {
        switch(access) {
            case "Private": return MemberAttributes.Private;
            case "Internal": return MemberAttributes.Assembly;
            case "Protected": return MemberAttributes.Family;
            case "ProtectedInternal": return MemberAttributes.FamilyAndAssembly;
            default: return MemberAttributes.Public;
        }
    }

    public static MemberAttributes DecodeMemberModifier(String modifier) {
        switch(modifier) {
            case "Virtual": return 0;
            case "Override": return MemberAttributes.Override;
            default: return MemberAttributes.Final;
        }
    }
}

class TypeStub : TypeDelegator
{
    private String name;

    public TypeStub(String name) : base(typeof(Enum)) {
        this.name = name;
    }

    public override String Name => name;
    public override String FullName => name;
}
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class LinqToSqlGeneratorBase
    {
        #region Fields
        private StringBuilder generationEnvironmentField;
        private CompilerErrorCollection errorsField;
        private List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if ((generationEnvironmentField == null))
                {
                    generationEnvironmentField = new StringBuilder();
                }
                return generationEnvironmentField;
            }
            set => generationEnvironmentField = value;
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if ((errorsField == null))
                {
                    errorsField = new CompilerErrorCollection();
                }
                return errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if ((indentLengthsField == null))
                {
                    indentLengthsField = new List<int>();
                }
                return indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent => currentIndentField;

        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session
        {
            get => sessionField;
            set => sessionField = value;
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((GenerationEnvironment.Length == 0) 
                        || endsWithNewline))
            {
                GenerationEnvironment.Append(currentIndentField);
                endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture))
            {
                endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((currentIndentField.Length == 0))
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, (Environment.NewLine + currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
            {
                GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - currentIndentField.Length));
            }
            else
            {
                GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new ArgumentNullException("indent");
            }
            currentIndentField = (currentIndentField + indent);
            indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if ((indentLengths.Count > 0))
            {
                var indentLength = indentLengths[(indentLengths.Count - 1)];
                indentLengths.RemoveAt((indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = currentIndentField.Substring((currentIndentField.Length - indentLength));
                    currentIndentField = currentIndentField.Remove((currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField  = CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get => formatProviderField;
                set
                {
                    if ((value != null))
                    {
                        formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new ArgumentNullException("objectToConvert");
                }
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new[] {
                            typeof(IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }

                return ((string)(method.Invoke(objectToConvert, new object[] {
                    formatProviderField })));
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper => toStringHelperField;

        #endregion
    }
    #endregion
}
